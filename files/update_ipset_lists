#!/bin/bash
#
# This script will parse a config file coming from ansible
# It will define which ipset lists we want to download and apply in ipset
# Ansible will also create the corresponding rules automatically based on names from that list
#

PATH=$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
config_file="/etc/sysconfig/ipset-lists"
log_file="/var/log/centos-ipset-update.log"

f_log() {
   echo "[+] $(date +%Y%m%d-%H:%M) Ipset lists refresh -> $*" >>$log_file
}

f_log "Starting ipset lists update ..."
tmp_dir=$(mktemp -d)
pushd $tmp_dir 2>&1 >/dev/null
egrep -v '^#' ${config_file}|while read line ; do 
  name=$(echo $line|cut -f 1 -d '|')
  url=$(echo $line|cut -f 2 -d '|')
  type=$(echo $line|cut -f 3 -d '|')
  ipfamily=$(echo $line|cut -f 4 -d '|')
  f_log "Updating list ${name} from url ${url}"
  curl --silent --fail ${url} > blocked-${name}
  if [ "$?" -eq "0" ]; then
    ipset list -t |grep -q  blocked-${name} || ipset create blocked-${name} ${type} maxelem 262144 family ${ipfamily}
    ipset create stg-${name} ${type} maxelem 262144 family ${ipfamily}
    egrep -v '^#' blocked-${name}| while read subnet ; do ipset add stg-${name} $subnet;done
    ipset swap stg-${name} blocked-${name}
    ipset destroy stg-${name}
  else
    echo "Error downloading from ${url} ... skipping" >> $log_file
    exit 1    
  fi
done
popd 2>&1 > /dev/null
/bin/rm -Rf $tmp_dir 2>&1 >/dev/null

f_log "Ipset lists updated in memory, saving to disk ..."
ipset save > /etc/sysconfig/ipset

